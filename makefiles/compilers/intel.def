# definitions for the Intel compilers

MPFC ?= mpiifort
MPCC ?= mpiicc
MPCXX ?= mpiicpc
cmd=$(shell basename "`which $(MPFC)`")
ifneq ($(cmd),$(MPFC))
MPFC = mpif90
MPCC = mpicc
MPCXX=mpiCC
endif

#abort if no valid intel compiler is found
cmd=$(shell basename "`which $(MPFC)`")
ifneq ($(cmd),$(MPFC))
$(error $(MPFC) not found)
endif

FC = ifort
CC = icc
CXX = icpc

MPFCVERSION:=$(shell $(FC) --version 2>&1 | head -1 | awk '{print $$3}')
MPFCMAJORVERSION:=$(shell echo $(MPFCVERSION) | awk -F. '{print $$1}')
MPFCMINORVERSION:=$(shell echo $(MPFCVERSION) | awk -F. '{print $$2}')

ifeq ($(USE_PERFLIB),scalasca)
 MPFC = scalasca -instrument -user mpiifort
 MPCC = scalasca -instrument -user mpiicc
 MPCXX = scalasca -instrument -user mpiicpc
#	FFLAGS += -fpp -Wp,-P
endif
ifeq ($(USE_PERFLIB),ompp)
# the preprocessor must not write #line directives
# and also the quotes in the SVN statement is switched off
 MPFC = kinst-ompp mpiifort
 FC = kinst-ompp ifort
#	FFLAGS += -fpp -Wp,-P
endif

ifeq ($(USE_PERFLIB),likwid)
 LIBS += -L$(LIKWID_HOME)/lib -llikwid -Wl,-rpath,$(LIKWID_HOME)/lib
 PREPROC += -DWITH_LIKWID
 INCPATHS += -I$(LIKWID_HOME)/include
endif

ifeq ($(USE_PERFLIB),perf)
 LIBS += -L$(PERFLIB_HOME)/lib -looperf -Wl,-rpath,$(PERFLIB_HOME)/lib
 PREPROC += -DWITHPERF=1
 INCPATHS += -I$(PERFLIB_HOME)/include
endif

ifeq ($(USE_PERFLIB),vtune)
 PREPROC += -DWITH_VTUNE_API
 INCPATHS += -I$(VTUNE_HOME)/include
 LIBS += -L$(VTUNE_HOME)/lib64 -littnotify
endif

ifeq ($(USE_PERFLIB),vtrace)
 FFLAGS += -tcollect
 LDFLAGS += -tcollect
 INCPATHS += -I$(ITAC_HOME)/include
endif

ifeq ($(USE_PERFLIB),coverage)
 FFLAGS += -prof-gen=srcpos
endif

SET_F2003_STANDARD = -stand f03 -diag-disable 7416,7025,10121
PREPROC_FLAG = -fpp
ONLY_PREPROCESS = -EP
HEAPARRAYS_FFLAGS = -heap-arrays 1024
ALIGN_FFLAGS = -align array64byte

DEBUG_TRACEBACK = -traceback
DEBUG_WARN = -warn all
DEBUG_RUNTIME_CHECK = -check all -ftrapuv -fstack-security-check -fpe0
#'-check noarg_temp_created' suppresses warnings about temporary arrays during runtime 
DEBUG_FFLAGS = $(DEBUG_TRACEBACK) -C -debug inline-debug-info
DEBUG_FFLAGS += $(DEBUG_RUNTIME_CHECK) $(DEBUG_WARN)
DEBUG_CFLAGS = $(DEBUG_TRACEBACK) -std=c99 -debug all -ftrapuv -w3 -Wall
DEBUG_CXXFLAGS = $(DEBUG_TRACEBACK) -debug all -ftrapuv -w3 -Wall

ifneq ($(strip $(MKL_TARGET_ARCH)),)
 MKL_ARCH?=$(MKL_TARGET_ARCH)
endif
MKL_ARCH?=intel64


ifeq ($(CHIP),Core2)
 CHIP_OPT = -march=core2 -xSSSE3
endif
ifeq ($(CHIP),Magny-Cours)
 CHIP_OPT = -msse3
endif
ifeq ($(CHIP),Nehalem)
 CHIP_OPT = -march=corei7 -xSSE4.2
endif
ifeq ($(CHIP),SandyBridge)
 CHIP_OPT = -march=corei7-avx -xAVX
endif
ifeq ($(CHIP),Xeon_E5_IvyBridge)
 CHIP_OPT = -march=core-avx-i -xAVX
endif
ifeq ($(CHIP),IvyBridge)
 CHIP_OPT = -march=core-avx-i -xcore-avx-i
endif
ifeq ($(CHIP),Haswell)
#requires intel version >=13
 CHIP_OPT = -march=core-avx2 -xcore-avx2
endif
ifeq ($(CHIP),Phi)
 CHIP_OPT =
 MKL_ARCH = mic
endif

CHIP_OPT ?= -march=native
OPTLEVEL ?= 3

#reduce optimization in specific versions due to
#compiler bugs:
ifeq ($(findstring 12.1,$(MPFCVERSION)),12.1)
#OPTLEVEL = 2
endif

OPT_FFLAGS = -O$(OPTLEVEL) $(CHIP_OPT)
OPT_CFLAGS = -O$(OPTLEVEL) $(CHIP_OPT)
PRODRUN_FFLAGS = $(OPT_FFLAGS) -ip
PRODRUN_CFLAGS = $(OPT_CFLAGS) -ip
OPENMP_FFLAGS = -openmp
OPENMP_CFLAGS = -openmp

SYMBOL_FFLAGS += -g 
SYMBOL_CFLAGS += -g

REPORT_VEC_FFLAGS = -vec-report3
REPORT_OPENMP_FFLAGS = -openmp-report2
REPORT_OFFLOAD_FFLAGS = -opt-report-phase=offload
REPORT_HLO_FFLAGS = -opt-report-phase=hlo
REPORT_FFLAGS = -opt-report -opt-report-phase=all \
	     -opt-report-file=gene_report.opt \
	     $(REPORT_VEC_FFLAGS) $(REPORT_OPENMP_FFLAGS)

REPORT_CFLAGS = $(REPORT_FFLAGS)

DOUBLE_PRECISION_FFLAGS = -r8
MODDIR_FFLAGS = -module $(OBJDIR)

ifneq ($(filter 10.1 10.2 10.3,$(MKLVERSION)),)
ifneq ($(filter 10.1 10.2,$(MKLVERSION)),)
 MKL_ARCH = em64t
endif

 MKL_SCALAPACK_LINKLINE = $(MKLROOT)/lib/$(MKL_ARCH)/libmkl_scalapack_lp64.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_solver_lp64_sequential.a -Wl,--start-group  \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_intel_lp64.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_sequential.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_core.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -lpthread -lm

 MKL_BLAS_LINKLINE = $(MKLROOT)/lib/$(MKL_ARCH)/libmkl_solver_lp64_sequential.a \
	-Wl,--start-group  $(MKLROOT)/lib/$(MKL_ARCH)/libmkl_intel_lp64.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_sequential.a \
	$(MKLROOT)/lib/$(MKL_ARCH)/libmkl_core.a -Wl,--end-group -lpthread -lm
endif

ifeq ($(MKL_SCALAPACK_LINKLINE),)
#default case; otherwise use follwing line
#ifneq ($(filter 11.0 13.5 14.0,$(MKLVERSION)),)
 MKL_SCALAPACK_LINKLINE = -L$(MKLROOT)/lib/$(MKL_ARCH) -Wl,-rpath,$(MKLROOT)/lib/$(MKL_ARCH) \
			  -lmkl_scalapack_lp64 \
			  -lmkl_intel_lp64 -lmkl_core -lmkl_sequential \
			  -lmkl_blacs_intelmpi_lp64 -lpthread -lm 

 MKL_BLAS_LINKLINE = -L$(MKLROOT)/lib/$(MKL_ARCH) -Wl,-rpath,$(MKLROOT)/lib/$(MKL_ARCH) \
			-lmkl_intel_lp64 \
		      	-lmkl_core -lmkl_sequential -lpthread -lm
endif


F2003_MISSING=

ifeq ($(findstring 13.1,$(MPFCVERSION)),13.1)
F2003_MISSING += -DF2003_NO_OPEN_CONVERT
endif

#reduce optimization in specific files and for specific compiler versions
#ifeq ($(MPFCMAJORVERSION),$(filter $(MPFCMAJORVERSION),12 13))
#NOOPTLIST += example_file.o
#NOOPTFLAGS = $(MODDIR_FFLAGS) -O0 $(DOUBLE_PRECISION_FFLAGS)
#endif
