#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "allbuilds", subject: "boost test", status: "skipped")

pipeline {
    agent { label('pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05 || ppcsgs09 || pcsgs11') }
    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "28",
                numToKeepStr: "100",
                artifactDaysToKeepStr: "28",
                artifactNumToKeepStr: "100"
            )
        )
        timeout(time: 3, unit: 'HOURS') 
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_DISCOTEC')
        MAINTAINER_MAIL = credentials('DISCOTEC_MAINTAINER_EMAIL')
    }
    stages {
        stage('checkout') {
            steps {
                script {
        		    buildbadge.setStatus('running')
                }
                dir('discotec-spack') {
                    sh '''
                        git -C spack pull || git clone git@github.com:freifrauvonbleifrei/spack.git 
                        cd spack
                        # reset compilers and external packages due to possible different systems
                        rm -f ~/.spack/bootstrap/config/packages.yaml
                        rm -f ~/.spack/linux/compilers.yaml 
                        rm -f ~/.spack/packages.yaml
                        # clean build caches
                        . ./share/spack/setup-env.sh
                        spack clean -ab
                        spack clean -fmps

                        spack bootstrap root $(pwd)/bootstrap
                        spack bootstrap disable spack-install
                        spack bootstrap now
                    '''
                }
            }
        }
        stage('build-dependencies') {
            matrix {
                axes {
                    axis {
                        name 'compiler'
                        values 'gcc'//, 'clang'
                    }
                    axis {
                        name 'mpiimpl'
                        values 'openmpi', 'mpich'
                    }
                }
                stages{
                    stage('build dependencies w/ spack') {
                        steps {
                            dir('discotec-spack/spack') {
                                sh '''
                                . ./share/spack/setup-env.sh
                                spack external find
                                spack compiler find  
                                # remove compilers with stl/linker/fortran issues
                                spack compiler remove -a gcc@10.2.1: || true # ignore if this compiler was not found
                                spack spec -y discotec@main -lto %${compiler} ^${mpiimpl} #+selalib # --only dependencies # actually build discotec, such that load command will work
                                spack install -y discotec@main -lto %${compiler} ^${mpiimpl} #+selalib # --only dependencies # actually build discotec, such that load command will work
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('build-and-test') {
            matrix {
                axes {
                    axis {
                        name 'build_type'
                        values 'Release', 'Debug'
                    }
                    axis {
                        name 'compiler'
                        values 'gcc',// 'clang' // omit clang for now, mpi can't find fortran with it
                    }
                    axis {
                        name 'mpiimpl'
                        values 'openmpi', 'mpich'
                    }
                }
                stages {
                    stage('init') {
                        steps {
                            dir("DisCoTec-${compiler}-${mpiimpl}-${build_type}") {
                                checkout scm
                                sh '''
                                    git clean -fdx
                                    rm -rf build*
                                '''
                            }
                            dir("DisCoTec-${compiler}-${mpiimpl}-${build_type}") {
                                sh '''
                                    github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                                    curl --verbose\
                                        --request POST \
                                        --url "https://api.github.com/repos/SGpp/DisCoTec/statuses/$GIT_COMMIT" \
                                        --header "Content-Type: application/json" \
                                        --header "authorization: Bearer ${github_token}" \
                                        --data "{
                                            \\"state\\": \\"pending\\",
                                            \\"context\\": \\"jenkins-${compiler}-${build_type}-ctest\\",
                                            \\"description\\": \\"Jenkins CI Job: jenkins-${compiler}-${build_type}-ctest\\",
                                            \\"target_url\\": \\"https://jenkins-sim.informatik.uni-stuttgart.de/jenkins/job/DisCoTec/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                                    }"
                                '''
                            }
                        }
                    }
                    stage('build DisCoTec') {
                        steps {
                            dir("DisCoTec-${compiler}-${mpiimpl}-${build_type}") {
                                sh '''
                                    . ../discotec-spack/spack/share/spack/setup-env.sh
                                    spack load --only dependencies --first discotec@main -lto %${compiler} ^${mpiimpl} #+selalib
                                    mkdir -p build/${compiler}-${build_type}
                                    cd build/${compiler}-${build_type}
                                    cmake -DCMAKE_BUILD_TYPE=${build_type} -DDISCOTEC_TEST=1 -DDISCOTEC_TIMING=1  -DDISCOTEC_ENABLEFT=0 -DDISCOTEC_GENE=0 -DDISCOTEC_USE_HIGHFIVE=1 -DDISCOTEC_OPENMP=1 -DDISCOTEC_USE_LTO=0 ../..
                                    make -j8
                                '''
                            }
                        }
                    }
                    stage('run tests') {
                        steps {
                            dir("DisCoTec-${compiler}-${mpiimpl}-${build_type}") {
                                sh '''
                                    export OMP_NUM_THREADS=4
                                    cd tests/                                    
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=fullgrid
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=hierarchization --log_level=message
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=loadmodel
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=reduce
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=rescheduling
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=task
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=distributedfullgrid --log_level=message
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=integration
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=stats
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=distributedsparsegrid
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=distributedsparsegrid/test_create* --log_level=message
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=distributedsparsegrid/test_write* --log_level=message
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=distributedsparsegrid/test_sparse* --log_level=message
                                    mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=worker
                                    #mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=ftolerance # cf https://github.com/SGpp/DisCoTec/issues
                                '''
                            }
                            dir("DisCoTec-${compiler}-${mpiimpl}-${build_type}") {
                                script{
                                    if (compiler == 'gcc' && mpiimpl == 'openmpi') { // execute third-level test only for one compiler set
                                        sh '''
                                            export OMP_NUM_THREADS=4
                                            cd tests/                   
                                            mpiexec -np 9 ./test_distributedcombigrid_boost --run_test=thirdLevel # random port errors
                                        '''
                                    }
                                }
                            }
                        }
                    }
                }
                post {
                    success {
                        sh '''
                            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                            curl --verbose\
                                --request POST \
                                --url "https://api.github.com/repos/SGpp/DisCoTec/statuses/$GIT_COMMIT" \
                                --header "Content-Type: application/json" \
                                --header "authorization: Bearer ${github_token}" \
                                --data "{
                                    \\"state\\": \\"success\\",
                                    \\"context\\": \\"jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"description\\": \\"Jenkins CI Job: jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"target_url\\": \\"https://jenkins-sim.informatik.uni-stuttgart.de/jenkins/job/DisCoTec/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                            }"
                        '''
                    }
                    failure {
                        sh '''
                            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                            curl --verbose\
                                --request POST \
                                --url "https://api.github.com/repos/SGpp/DisCoTec/statuses/$GIT_COMMIT" \
                                --header "Content-Type: application/json" \
                                --header "authorization: Bearer ${github_token}" \
                                --data "{
                                    \\"state\\": \\"failure\\",
                                    \\"context\\": \\"jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"description\\": \\"Jenkins CI Job: jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"target_url\\": \\"https://jenkins-sim.informatik.uni-stuttgart.de/jenkins/job/DisCoTec/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                            }"
                        '''
                    }
                    aborted {
                        sh '''
                            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                            curl --verbose\
                                --request POST \
                                --url "https://api.github.com/repos/SGpp/DisCoTec/statuses/$GIT_COMMIT" \
                                --header "Content-Type: application/json" \
                                --header "authorization: Bearer ${github_token}" \
                                --data "{
                                    \\"state\\": \\"error\\",
                                    \\"context\\": \\"jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"description\\": \\"Jenkins CI Job: jenkins-${compiler}-${build_type}-ctest\\",
                                    \\"target_url\\": \\"https://jenkins-sim.informatik.uni-stuttgart.de/jenkins/job/DisCoTec/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                            }"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                buildbadge.setStatus('success')
            }
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                echo "Build failed! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins DisCoTec: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} failed" "${MAINTAINER_MAIL}"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                echo "Build aborted on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins DisCoTec: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} aborted" "${MAINTAINER_MAIL}"
            '''
        }
    }
}
