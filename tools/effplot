#!/bin/bash
#script to visualize GENE efficiency data with gnuplot
#usage: effplot efficiency.log

tmpdatfile="/tmp/tmp-effplot-$USER.dat"
tmpdatfile1="/tmp/tmp1-effplot-$USER.dat"
tmppltfile="/tmp/tmp-effplot-$USER.plt"
tmppltfileeps="/tmp/tmp-effplot-$USER-eps.plt"

validfiles=0
if [ -f $tmpdatfile ]; then
    rm $tmpdatfile
fi

until [ -z "$1" ]; do
    if [ -f $1 ]
    then
	title[$validfiles]="$1"

	#remove first line (header), NaN lines, and column separators
	awk '{if ((!/NaN/)&&(NR!=1)) {if (NF==5) {print $1 " " $3 " " $5} else {print $3 " " $5 " " $7}}}' $1 > $tmpdatfile1

	#add comment to identify file
	echo "#$1" >> $tmpdatfile

	#determine min_CPU
	min_step_nprocs=`! perl -e '$min=1e38;$nprocs=0; while (<>) {@t=split; if(($t[1])&&($t[1]<$min)){$nprocs=$t[0];$min=$t[1]}}; print $nprocs' < $tmpdatfile1`
	min_step_eff=`! perl -e '$min=1e38;$eff=0; while (<>) {@t=split; if(($t[1])&&($t[1]<$min)){$eff=$t[2];$min=$t[1]}}; print $eff' < $tmpdatfile1`
	best_eff_nprocs=`! perl -e '$min=1e38;$nprocs=0; while (<>) {@t=split; if(($t[2])&&($t[2]<$min)){$nprocs=$t[0];$min=$t[2]}}; print $nprocs' < $tmpdatfile1`
	min_CPU=`! perl -e '$min=1e38; while (<>) {@t=split; if(($t[2])&&($t[2]<$min)){$min=$t[2]}}; print $min' < $tmpdatfile1`	
	echo "file: $1"
	echo "fastest computation at n_procs_sim=$min_step_nprocs"
	echo "with parallel efficiency of "
	echo "scale=4; (1/$min_step_eff*$min_CPU*100)" | bc  
	echo "(the optimum of 100 is reached with n_procs_sim= $best_eff_nprocs)"
	echo ""
	
	#rescale column 3 (efficiency) and add to temporary data file
        awk -v min="$min_CPU" '{print $1 " " $2 " " (1./$3*100.0*min)}' $tmpdatfile1 >> $tmpdatfile

	#add to blank lines for gnuplot blocks
	echo "" >> $tmpdatfile
	echo "" >> $tmpdatfile

	validfiles=`expr $validfiles + 1`
    else
	echo "usage: effplot <efficiency file(s)>"
	exit
    fi
    shift
done

if [ "$validfiles" -gt "0" ]; then
    if [ "$validfiles" -eq "1" ]; then
	ltype=1
    else
	ltype=0
    fi

  #create temporary gnuplot file
  echo "#temporary file created by effplot
  set xzeroaxis lt -1
  set xlabel ' number of processes' 
  set multiplot
  set size 0.5,1

  set origin 0.0,0.0;
  set logscale x
  set logscale y
  set ylabel  'wall clock time per time step (loglog)'
  set title 'wall clock time per time step'
  plot '$tmpdatfile' u 1:2 w lp lt 0 lw 3 tit '${title[0]}'" >> $tmppltfile
  cur_block=1
  while [ $cur_block -lt $validfiles ]; do
      echo "  replot '' i $cur_block u 1:2 w lp lt $cur_block lw 3 tit '${title[$cur_block]}'"\
	  >> $tmppltfile
      cur_block=`expr $cur_block + 1`
  done

  echo "set origin 0.5,0.0;
  unset logscale x
  unset logscale y
  set yrange [0:100]
  set title 'parallel efficiency (best is 100%)'
  set ylabel 'parallel efficiency (%)'
  plot '$tmpdatfile' u 1:3 w lp lt $ltype lw 3 tit '${title[0]}'" >> $tmppltfile
  cur_block=1
  while [ $cur_block -lt $validfiles ]; do
      echo "  replot '' i $cur_block u 1:3 w lp lt $cur_block lw 3 tit '${title[$cur_block]}'"\
	  >> $tmppltfile
      cur_block=`expr $cur_block + 1`
  done
  echo "  unset multiplot" >> $tmppltfile
  gnuplot -persist $tmppltfile


  #create eps file
  echo "#temporary file created by effplot for printing effplot.eps
  # change terminal to postscript and plot everything again into a .ps file
  set term postscript eps enhanced 20 color lw 3
  set output 'effplot.eps'" > $tmppltfileeps
  cat $tmppltfile >> $tmppltfileeps
  echo "  set terminal x11 "\
  >> $tmppltfileeps
  gnuplot $tmppltfileeps

  #cleanup
  rm $tmpdatfile
  rm $tmpdatfile1
  rm $tmppltfile
  rm $tmppltfileeps

else
  echo "no valid input file found"
  echo "usage: effplot <efficiency file(s)>"
  exit
fi
