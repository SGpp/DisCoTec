#!/usr/bin/perl
# Usage: ./testsuite in testsuite-directory
# Given a series of test problems consisting of numbered
# parameters files, testsuite tries to compile/run
# each test and to compare the resulting file with the
# corresponding reference file. Errors during compiling/
# running GENE or deviations larger $limit
# will abort the testsuite.

use strict;
use File::Copy;
use Cwd;
use Getopt::Long;
use Switch;
# use tools/perl (scanscript): add folder to perl path variable @INC
use lib "../tools/perl";
use parmod_routines;


my $maxprocs=0;
my $i=1;
my $e=10000;
my $interactive=0;
my $writefiles=0;
my $writeall=0;
my $helptext=0;
my $fast=0;
my $force=0;
my $OUTDIR = $ENV{'OUTDIR'};
my $testset = 'standard';
my $precision = 'double';
my $setvar = '';
my $syscall = '';
my $res_ext = '';

GetOptions("help"=> \$helptext,
     "w"=> \$writefiles,
     "wa"=> \$writeall,
     "f"=> \$force,
     "fast"=> \$fast,
     "i"=> \$interactive,
     "mpiprocs:i"=> \$maxprocs,
     "s:i"=> \$i,
     "e:i"=> \$e,
     "o:s"=> \$OUTDIR,
     "outdir:s"=> \$OUTDIR,
     "t:s"=> \$testset,
     "precision:s"=> \$precision,
     "setvar:s"=> \$setvar,
     "syscall:s" => \$syscall);

if ($writeall){
   $writefiles=$writeall;
}

if ($maxprocs eq 0){
  switch ($testset) {
  case 'big'   { $maxprocs=128 }
  case 'bpar'  { $maxprocs=32  }
  case 'slepc' { $maxprocs=16  }
  else         { $maxprocs=8   }
  }
}

my $resfile = 'nrg';
my $comptype= 'initial value solver';
switch ($testset){
  case 'slepc' {
     $resfile = 'eigenvalues';
     $comptype= 'eigenvalue solver'
  }
  case 'neoclassic'{
     $resfile = 'neoclass';
     $comptype= 'nc equilibrium solver'
  }
}

#determine machine/architecture
my $make = (system("gmake -v > /dev/null") > 0) ? "make" : "gmake";
my $mach = `$make -f ../makefile mach_wrapper`;
chomp($mach);

#find makefile
my $makefile='';
if (-e "make_local"){
   if (-e "$mach.mk"){
      $makefile="$mach.mk";
   }
}else{
   if (-e "../bin/$mach.mk"){
      $makefile="../bin/$mach.mk";
   }
}
if ($makefile eq '') {
    print "makefile is missing, assuming that the standard makefile for this machine is used";
    my $makefile="../machines/$mach/$mach.mk";
}

if ($helptext) {
   show_help();
   exit(0);
}

#info box
print "***********************************************\n";
print "************** GENE11 test suite **************\n";
print "***********************************************\n";
print "Important note: double precision is required\n";
if ( $precision ne 'double' ) {
    print "You are using $precision precision\n";
}
print "Please make sure the corresponding entry in \n";
print "$makefile is filled\n\n";
print "using $maxprocs MPI processes \n";

if ($OUTDIR eq "") {
   print "warning: no OUTDIR set\n";
   $OUTDIR=$ENV{'PWD'};
}else{
   if(not -d "$OUTDIR") {
      mkdir("$OUTDIR");
      print "create OUTDIR\n";
   }
}

if ($fast) {
   print "note: the fast option is *not* recommended!\n";
   print "      when activated, you should really know \n";
   print "      what you are doing!\n";
}

print "Writing (temporary) files to $OUTDIR\n";

my $parfile=sprintf("parameters_%d",$i);
my $tmpgeneout = "$OUTDIR/tmpgene.out";
my $tmpgeneerr = "$OUTDIR/tmpgene.err";
my $autosyscall=0;
if ($syscall eq ''){
    $autosyscall=1;
}else{
    if ("$testset" ne "scan") {
	$syscall.=" >$tmpgeneout 2>$tmpgeneerr";}
}
my $timelim = $interactive ? 120 : 10000000;
my $slepcmf = "no";
my $slepc = "no";
$slepcmf=read_entry("$makefile","SLEPC");
my $scalapackmf = "no";
$scalapackmf=read_entry("$makefile","SCALAPACK");
my $futilsmf = "no";
$futilsmf=read_entry("$makefile","FUTILS");
my $N_PES=0;
our $firsttest=1;
my @perf_res;


if ("$testset" eq "scan"){
   run_scantest();
   exit(0);
}

while((-e "$testset/$parfile") && ($i <= $e)){
    #skip tests which require HDF5 if FUTILS is not linked
    if ($futilsmf ne "yes" && (
	    (read_entry("$testset/$parfile","magn_geometry")=~/\s*chease/)
	    || (read_entry("$testset/$parfile","chpt_read_h5")=~/\s*[tT]/) 
	    || (read_entry("$testset/$parfile","chpt_h5")=~/\s*[tT]/) ) ) {
	print "Skipping test $i - requires FUTILS to be linked\n";
	$i++;
	$parfile=sprintf("parameters_%d",$i);
	next;
    }

   #skip nonlocal tests if not linked with scalapack
   if ($scalapackmf ne "yes" && (
        (read_entry("$testset/$parfile","x_local")=~/\s*[fF]/)
        || (read_entry("$testset/$parfile","y_local")=~/\s*[fF]/) ) ) {
      $i++;
      $parfile=sprintf("parameters_%d",$i);
      next;
   }
   print "\n";

   if ($testset eq 'slepc'){
      if($i eq 1){
         $resfile = 'omega';
         $comptype= 'initial value solver';
      }else{
         $resfile = 'eigenvalues';
         $comptype= 'eigenvalue solver';
      }
      if ($slepcmf ne "yes"){
         print "Activate SLEPC in $makefile when running the slepc testsuite"
      }
      $slepc="yes";
   }else{
      #switch on slepc
      if ($slepcmf eq "yes"){
         if ($testset eq "inc_loc" && $i < 3){
            $slepc="no";
         }elsif ($precision ne 'double') {
            $slepc="no";
         }else{
            if ($slepc eq "no"){
               print "switching on SLEPc for computation of dt_max\n\n";
               $slepc="yes";
            }
         }
      }
   }

   printf("starting $testset test %d",$i);
   my $comment=read_entry("$testset/$parfile","comment");
   print " - $comment\n";

   if ($testset eq 'inc_loc'){
      $N_PES=set_n_pes("$testset/$parfile");
   }else{
      $N_PES=$maxprocs
   }

#    print "setting N_PES to $N_PES\n ";
   my $comp_time=read_entry("$testset/$parfile","time for $comptype");
   if (($N_PES <= $maxprocs) && ($comp_time <= $timelim)) {
      copy("$testset/$parfile","parameters");
      replace_entry("parameters","diagdir","'$OUTDIR'");
      replace_entry("parameters","chptdir","'$OUTDIR'");
      if ($fast) {
	  (@perf_res)=read_perf();
	  uncomment_entry("parameters","n_procs");
	  replace_entry("parameters","n_procs_s","@perf_res[0]");
	  replace_entry("parameters","n_procs_v","@perf_res[1]");
	  replace_entry("parameters","n_procs_w","@perf_res[2]");
	  replace_entry("parameters","n_procs_x","@perf_res[3]");
	  replace_entry("parameters","n_procs_y","@perf_res[4]");
	  replace_entry("parameters","n_procs_z","@perf_res[5]");
	  uncomment_entry("parameters","perf_vec");
	  replace_entry("parameters","perf_vec","@perf_res[6]");
	  comment_entry("parameters","n_procs_sim");
      }

      my $geomdir=read_entry("$testset/$parfile","geomdir");
      $geomdir =~ s/'//g;
      my $absgeomdir=$ENV{"PWD"};
      $absgeomdir =~ s/testsuite*/geomdata/;
      replace_entry("parameters","geomdir","'$absgeomdir/$geomdir'");

      #obtain calc_dt from parameters---if explicitly set to false, do not force
      #dt calculation through SLEPc
      my $calc_dt_parset=read_entry("$testset/$parfile","calc_dt");
      $calc_dt_parset =~ s/\.//g;
      $calc_dt_parset =~ tr/F-T/f-t/;
      if (($slepc eq "yes") && ($calc_dt_parset ne "f")) {
          set_entry("parameters","&global","calc_dt",".t.");
          set_entry("parameters","&general","calc_dt",".t.");
      }
      
      if ($setvar =~ /(.*)=(.*)/) {
          print "Setting $1 to $2\n";
          replace_entry("parameters","$1","$2");
      }

      print "compiling and running GENE ... (this may take a while)\n";
      if ($autosyscall) {$syscall="$make -j -f ../makefile run PRECISION=$precision N_PES=$N_PES NLSPATH=$ENV{'NLSPATH'}";
             $syscall.=" >$tmpgeneout 2>$tmpgeneerr";}
      if ((system("$syscall")) > 0) {
          print "problem encountered while compiling and running GENE\n";
          show_file("$tmpgeneerr");
          exit(1);
      }
      #read write_h5 here, since it might be changed by setvar
      my $h5_switch=read_entry("parameters","write_h5");
      if ($h5_switch eq "T"){
          $res_ext='.h5';
      } else {
          $res_ext='';
      }
      
      compare_results($resfile,$i,$res_ext);

      my $energyfile=sprintf("%s/energy_%d%s",$testset,$i,$res_ext);
      if (-e "$energyfile" ){ 
         compare_results("energy",$i,$res_ext);
      }


      old_write_perf_file("$OUTDIR","parameters.dat");

      if ($writeall) {
         my $thisdir=cwd();
         copy("$tmpgeneout","$OUTDIR/stdout_$i");
         copy("$tmpgeneerr","$OUTDIR/stderr_$i");      
         copy("$OUTDIR/field.dat","$OUTDIR/field_$i");
         copy("$OUTDIR/neoclass.dat","$OUTDIR/neoclass_$i");
         copy("$OUTDIR/nrg.dat","$OUTDIR/nrg_$i");
         copy("$OUTDIR/energy.dat","$OUTDIR/energy_$i");
         copy("$OUTDIR/omega.dat","$OUTDIR/omega_$i");
         copy("$OUTDIR/mom_ions.dat","$OUTDIR/mom_ions_$i");
         copy("$OUTDIR/mom_electrons.dat","$OUTDIR/mom_electrons_$i");
         copy("$OUTDIR/vsp.dat","$OUTDIR/vsp_$i");
         copy("$OUTDIR/circular.dat","$OUTDIR/circular_$i");
         copy("$OUTDIR/s_alpha.dat","$OUTDIR/s_alpha_$i");
         copy("$OUTDIR/autopar.dat","$OUTDIR/autopar_$i");
         #copy("$OUTDIR/timeest.dat","$OUTDIR/timeest_$i");
      }
      if ($writefiles) {
         copy("$OUTDIR/parameters.dat","$OUTDIR/$parfile");
         replace_entry("$OUTDIR/$parfile","diagdir","'/out'");
         replace_entry("$OUTDIR/$parfile","chptdir","'/out'");
         replace_entry("$OUTDIR/$parfile","geomdir","'$geomdir'");
         comment_entry("$OUTDIR/$parfile","n_procs");
         comment_entry("$OUTDIR/$parfile","perf_vec");
         comment_entry("$OUTDIR/$parfile","nblocks");
         set_entry("$OUTDIR/$parfile","&info","comment","$comment");
      }
      unlink("$tmpgeneout");
      unlink("$tmpgeneerr");
   } else {
      printf("skipping test %d (takes too long or needs more than %d processes)\n",$i,$maxprocs);
   }
   $i++;
   $parfile=sprintf("parameters_%d",$i);
}

# cleaning up

clean_up(".dat");
clean_up(".dat.h5");

print "Done\n";


# ------------- subroutines ------------------


sub compare_results{
  my $resfile_in=shift;
  my $i=shift;
  my $res_ext=shift;

  my $file1=sprintf("%s_%d%s",$resfile_in,$i,$res_ext);
  my $file2 = "$OUTDIR/$resfile_in.dat$res_ext";
  print "comparing $resfile_in data ...\n";

  my $diffresult = difffile("$testset/$file1",$file2,$precision,$resfile_in,$res_ext);
  if ($diffresult == 0) {
     print "no differences found\n";   
     if ($resfile_in ne "energy"){
        compare_perf("$OUTDIR/parameters.dat");
     }
  }elsif ($diffresult > 0) {
     printf("!!! differences in test %d !!!\n",$i);
     if (!($force)) {
        print "aborting test suite ...\n";
        exit(1);
     }  
     if ($resfile_in ne "energy"){
        compare_perf("$OUTDIR/parameters.dat");
     }
  }else{
     show_file("$tmpgeneerr");
     if (!($force)) {
        exit(1);
     }
  }
  if ($writefiles) {
     copy("$file2","$OUTDIR/$file1");
  }
  unlink("$file2");
}



sub clean_up{
  my $ext = shift;
  if (-e "$OUTDIR/checkpoint" ) { unlink("$OUTDIR/checkpoint"); }
  if (-e "$OUTDIR/s_checkpoint" ) { unlink("$OUTDIR/s_checkpoint"); }
  if (-e "$OUTDIR/mom_electrons$ext" ) { unlink("$OUTDIR/mom_electrons$ext"); }
  if (-e "$OUTDIR/mom_ions$ext" ) { unlink("$OUTDIR/mom_ions$ext"); }
  if (-e "$OUTDIR/mom_deuterium$ext" ) { unlink("$OUTDIR/mom_deuterium$ext"); }
  if (-e "$OUTDIR/mom_tritium$ext" ) { unlink("$OUTDIR/mom_tritium$ext"); }
  if (-e "$OUTDIR/mom_helium$ext" ) { unlink("$OUTDIR/mom_helium$ext"); }
  if (-e "$OUTDIR/profiles_electrons$ext" ) { unlink("$OUTDIR/profiles_electrons$ext"); }
  if (-e "$OUTDIR/profiles_ions$ext" ) { unlink("$OUTDIR/profiles_ions$ext"); }
  if (-e "$OUTDIR/field$ext" ) { unlink("$OUTDIR/field$ext"); }
  if (-e "$OUTDIR/omega$ext" ) { unlink("$OUTDIR/omega$ext"); }
  if (-e "$OUTDIR/eigenvalues$ext" ) { unlink("$OUTDIR/eigenvalues$ext"); }
  if (-e "$OUTDIR/vsp$ext" ) { unlink("$OUTDIR/vsp$ext"); }
  if (-e "$OUTDIR/vpar$ext" ) { unlink("$OUTDIR/vpar$ext"); }
  if (-e "$OUTDIR/s_alpha$ext" ) { unlink("$OUTDIR/s_alpha$ext"); }
  if (-e "$OUTDIR/slab$ext" ) { unlink("$OUTDIR/slab$ext"); }
  if (-e "$OUTDIR/circular$ext" ) { unlink("$OUTDIR/circular$ext"); }
  if (-e "$OUTDIR/tracer.20$ext" ) { unlink("$OUTDIR/tracer.20$ext"); }
  if (-e "$OUTDIR/hm128$ext" ) { unlink("$OUTDIR/hm128$ext"); }
  if (-e "$OUTDIR/parameters$ext" ) { unlink("$OUTDIR/parameters$ext"); }
  if (-e "$OUTDIR/autopar$ext" ) { unlink("$OUTDIR/autopar$ext"); }
  if (-e "$OUTDIR/tok16$ext" ) { unlink("$OUTDIR/tok16$ext"); }   
  if (-e "$OUTDIR/energy$ext" ) { unlink("$OUTDIR/energy$ext"); }   
  if (-e "$OUTDIR/energy3d$ext" ) { unlink("$OUTDIR/energy3d$ext"); }   
}

sub set_n_pes{
  my $filename = shift;
  my $n_pes=1;
#    my $keyword="nspec";
  open(FH,"$filename");
  while (<FH>) {
     if ($_=~/=/) {
        $_ =~ /\s*(\w+)\s*=\s*(\S+)\s*\!?/;
        #$_ =~ /\s*(\w*)\s*=*\s*(\w*)\n/;
        if (("$1" eq "n_procs_s")
             or ("$1" eq "n_procs_v") or ("$1" eq "n_procs_w") 
             or ("$1" eq "n_procs_y") or ("$1" eq "n_procs_z")) {
           $n_pes = $n_pes * abs($2);
        }
     }
  }
  close(FH);
  return($n_pes);
}

sub difffile {
# returns 1 if file entries differ more than
# the value specified by $limit and the difference is 
# not in the last digit (avoid rounding errors)
# returns -1 if the second file is missing 
# and 0 if everything is alright
  my $file1 = shift;
  my $file2 = shift;
  my $precision = shift;
  my $resfile_in = shift;
  my $res_ext = shift;
  my $limit = 1e-14;
  my $diff = 0;
  my $listdiff;
  my $line1;
  my $line2;
  my $j=1;
  my $norm=1.;
  my $norm_j = 1;
  if ( $precision ne 'double' ) {
     $limit = 1e-08;
  }

  if (($resfile_in eq 'omega') or ($resfile_in eq 'eigenvalues')){
#    the reference eigenvalue files are only standard omega_prec
     $limit = 1e-03;
  }
  if (($resfile_in eq 'energy') or ($resfile_in eq 'neoclass')){
#    the reference energy file has 6 digit numbers only, the neoclass file as well
     $limit = 1e-05;
  }

  if ($res_ext eq '.h5') {
     #PROBLEM : h5diff does not accept relative (-p) + absolute (-d) difference
     #$diff=system("h5diff -r -p $limit -d 1E-16 $file1 $file2");
     #->restrict to -d 1E-8 for now (irrelevant differences might appear)
     $diff=system("h5diff -r -d 1E-8 $file1 $file2");
  }else{
     open(FILE1,"<$file1") || die "error: $file1 not found\n";
     if (!(open(FILE2,"<$file2"))) { 
        print "error: $file2 not found\n";
        close(FILE1);
        return(-1);
     }
     while (($line1=<FILE1>) && ($line2=<FILE2>)) {
        my @list1 = split(' ',$line1);
        my @list2 = split(' ',$line2);
        if ("$resfile_in" eq "energy"){
    #      differences are normalized to total energy
           $norm_j=1;
           $j=1;
        }else{
    #      nrg: differences are normalized to the squared density fluctuation
    #      neoclass: differences are normalized to the |particle flux|
           $j=0;
           $norm_j=0;
        }
        while (($j<=$#list1)) {
           my @first=split(/E/,$list1[$j]);
           my @second=split(/E/,$list2[$j]);
           if ($j==$norm_j){
              $norm=abs($list1[$j]);
           }
           if (abs($first[0]-$second[0])>0.00011){
              if (abs($list1[$j]-$list2[$j])/$norm > $limit){
                 print "< $line1";
                 print "> $line2\n";
                 #printf("relative difference %d: %f, %f \n",$j,($list1[$j]-$list2[$j])/$norm,$limit);
                 $diff=1;
                 last;
              }
           }
           $j++;
        }
     }
     # show rest of files if not end of file reached
     if ($line1=<FILE1>) {
        $diff=1;
        print "< $line1";
        while ($line1=<FILE1>) {
          print "< $line1";
        }
     }
     close(FILE1);
     if ($line2=<FILE2>) {
        $diff=1;
        print "> $line2";
        while ($line2=<FILE2>) {
           print "> $line2";
        }
     }
     close(FILE2);
  }
  return($diff);
}

sub old_write_perf_file {
  my $dir = shift;
  my $par = shift;
  my $fname = sprintf("%s_%s.perf",$mach,$testset);
  if ($firsttest){
     my $timestamp=sprintf "%02d.%02d.%04d, %02d:%02d",(localtime)[3],((localtime)[4] +1),
          ((localtime)[5] +1900),(localtime)[2],(localtime)[1];
     my $revnum=read_entry("$dir/$par","SVN_REV");
     open(FH,">$dir/$fname");
     print FH "$testset testsuite on $mach \n";
     print FH "started $timestamp with SVN revision number: $revnum \n";
     close(FH);
     $firsttest=0;
  }
  my $perf = read_entry("$dir/$par","perf_vec");
  my @parall;
  $parall[0] = read_entry("$dir/$par","n_procs_s");
  $parall[1] = read_entry("$dir/$par","n_procs_v");
  $parall[2] = read_entry("$dir/$par","n_procs_w");
  $parall[3] = read_entry("$dir/$par","n_procs_x"); 
  $parall[4] = read_entry("$dir/$par","n_procs_y");
  $parall[5] = read_entry("$dir/$par","n_procs_z");
  my $runtime=read_entry("$dir/$par","time for $comptype");
  my $initime=read_entry("$dir/$par","init_time");

  open(FH,">>$dir/$fname");
  print FH "test $i: time loop: $runtime s (parallelization: @parall, perf_vec: $perf), init_time $initime s \n";
  close(FH);
}

sub write_perf_file {
  my $dir = shift; # output directory 
  my $par = shift; # filename of parameters.dat

  #my $fname = sprintf("%s_%s.perf",$mach,$testset);
  my $fname = "perf_data.csv";
  # get the actual time stamp
  my $timestamp=sprintf "%04d-%02d-%02d %02d:%02d",((localtime)[5] +1900),
  ((localtime)[4] +1),(localtime)[3],(localtime)[2],(localtime)[1];
  my $revnum=read_entry("$dir/$par","SVN_REV");
  $revnum =~ s/^\s+//;
  $revnum =~ s/\s+$//;

  my $perf = read_entry("$dir/$par","perf_vec");
  my @parall;
  $parall[0] = read_entry("$dir/$par","n_procs_s");
  $parall[1] = read_entry("$dir/$par","n_procs_v");
  $parall[2] = read_entry("$dir/$par","n_procs_w");
  $parall[3] = read_entry("$dir/$par","n_procs_x"); 
  $parall[4] = read_entry("$dir/$par","n_procs_y");
  $parall[5] = read_entry("$dir/$par","n_procs_z");
  my $runtime=read_entry("$dir/$par","total_time");
  my $initime=read_entry("$dir/$par","init_time");

#    print "$mach;$testset/$i;$timestamp;$runtime;$initime;$revnum;$perf;@parall\n";
  #open the output file, appending if existing, creates if necessary
  open(FH,">>$dir/$fname");
  print(FH "$mach;$testset/$i;$timestamp;$runtime;$initime;$revnum;$perf;@parall\n");
  close(FH);
}

sub read_perf{
  my $line;
  my $linenr;
  my $newline;
  my @lineparts;
  my @parall = ("0","0","0","0","0","0");
  my $perfv = "0 0 0 0 0 0 0 0 0";
  open(FH,"perf_data");
  while ($line=<FH>) {
  if ($line =~ /$testset/){
     for($linenr=0;$linenr<=$i;$linenr++){
        $newline=readline(FH);
     }
     @lineparts= split(' ',$newline);
     if(~$lineparts[1]=~ /$i:/){
        print "test numbers are screwed up \n"};
     if ($line =~ /$mach/) {
           @parall=@lineparts[7 .. 12];
	   $perfv="@lineparts[14 .. 22]";
	   @parall[5] = substr($parall[5], 0, -1);
	   $perfv = substr($perfv, 0, -2);
        }
     }
  }
  close(FH);

#  print "parall = @parall\n";
#  print "perf_vec = $perfv\n";

  return(@parall, $perfv);
}  

sub compare_perf{
  my $parpath=shift;
  my $line;
  my $machtime=0.;
  my $bobtime=0.;
  my $linenr;
  my $newline;
  my @lineparts;
  my $newtime = read_entry("$parpath","time for $comptype"); 
  open(FH,"perf_data");
  while ($line=<FH>) {
  if ($line =~ /$testset/){
     for($linenr=0;$linenr<=$i;$linenr++){
        $newline=readline(FH);
	if ($newline =~ /^\s*$/) {
	    $linenr=$i+1;
	}
     }
     @lineparts= split(' ',$newline);
     if(~$lineparts[1]=~ /$i:/){
        print "test numbers are screwed up \n"};
        if ($line =~ /$mach/) {
           $machtime=$lineparts[4];
        }elsif($line =~ /bob_cluster/) {
           $bobtime=$lineparts[4];
        }
     }
  }
  close(FH);
  my $text;
  if($bobtime==0. && $machtime==0.){
     $text=" (no data found for testset $testset, performance comparison therefore not possible";
  }elsif($machtime==0.){
     $text=sprintf(", i.e. %.2f %% of runtime on cluster (2.33GHz Intel Xeon(R) & infiniband), no data found for $mach",
     $newtime/$bobtime*100);
  }else{
     $text=sprintf(", i.e. %.2f %% of previous tests",$newtime/$machtime*100);
  }
  printf("Time for %s: %.2fs",$comptype,$newtime); 
  print "$text \n";
}

sub show_file {
  my $file = shift;
  open(FH,"<$file");
  my $line;
  while ($line=<FH>) {
     print "$line\n";  
  }
  close(FH);
}

## a copy of the testsuite that runs the scanscript and compiles scan.log data.
## this tests the MPI domain decomposition in GENE as well as running multiple 
## GENE instances.
## it is recommended to run at least the standard testset prior to the scan testset!
sub run_scantest{
  my $scancall;

  if ($slepcmf ne "yes"){
     print "Skipping $testset tests - requires SLEPc to be linked\n";
     exit(0);
  }
#cleaning up output directory
  system("rm -rf $OUTDIR/scanfiles????");

  while((-e "$testset/$parfile") && ($i <= $e)){
     printf("starting $testset test %d\n",$i);

     copy("$testset/$parfile","parameters");
     replace_entry("parameters","diagdir","'$OUTDIR'");
     replace_entry("parameters","chptdir","'$OUTDIR'");
     if ($fast) {
        uncomment_entry("parameters","n_procs");
        uncomment_entry("parameters","perf_vec");
     }
     if ($setvar =~ /(.*)=(.*)/) {
         print "Setting $1 to $2\n";
         replace_entry("parameters","$1","$2");
     }
     $N_PES=$maxprocs;
     if ($autosyscall) {$scancall = "./scanscript --np $N_PES >$tmpgeneout 2>$tmpgeneerr";
	 print "compiling GENE and running scanscript ... (this may take a while)\n";}
     else {$scancall = "./scanscript --np $N_PES --syscall=\"$syscall\" >$tmpgeneout 2>$tmpgeneerr";
	 print "running scanscript ... (this may take a while)\n";}
     if ((system("$scancall")) > 0) {
         print "problem encountered while running scanscript with GENE\n";
         show_file("$tmpgeneerr");
         exit(1);
     }

#compare scan.log
     my $resfile_in='scan.log';
     my $res_ext='';
     my $file1 = sprintf("%s_%d",$resfile_in,$i);
     my $file2 = sprintf("$OUTDIR/scanfiles%.4d/$resfile_in",$i-1);
     print "comparing $resfile_in data ...\n";
     my $diffresult = difffile("$testset/$file1",$file2,$precision,$resfile_in,$res_ext);
     if ($diffresult == 0) {
        print "no differences found\n\n";   
     }elsif ($diffresult > 0) {
        printf("!!! differences in test %d !!!\n\n",$i);
        if (!($force)) {
           print "aborting test suite ...\n";
           exit(1);
        }  
     }else{
        show_file("$tmpgeneerr");
        if (!($force)) {
           exit(1);
        }
     }
     if ($writefiles){
        copy("$file2","$OUTDIR/scan.log_$i");
        copy("$tmpgeneout","$OUTDIR/stdout_$i");
        copy("$tmpgeneerr","$OUTDIR/stderr_$i");      
     }

#initiate next test case
     $i++;
     $parfile=sprintf("parameters_%d",$i);
  }

#cleaning up output directory (again)
  if (not $writefiles) {system("rm -r $OUTDIR/scanfiles*");}
  print "Done\n";
}


sub show_help {
  print "testsuite\n";
  print "usage: ./testsuite\n";
  print "options: \n";
  print "-t <string> : choose test set (default:standard)\n";
  print "-outdir (or -o) <string> : sets output directory\n";
  print "-s <integer> : sets test start number (default: 0)\n";
  print "-e <integer> : set test end number (default:10000)\n";
  print "-w : write GENE output files of each test permanently to output directory (otherwise they will be removed after comparison of the results \n";   
  print "-f : force testsuite to continue despite differences\n";
  print "-help : display this help text\n";
  print "-i : interactive mode, only tests with computation time < 120s (on PSI) will be executed\n";
  print "-mpiprocs <integer> : number of mpi processes (default: 128 for big, 8 for all other sets)\n";
  print "-syscall <string>   : replace the default syscall by user defined command\n";
  print "-setvar <string>    : replace parameters line by user defined (\"keyword=token\") combination\n";
}
