#!/bin/bash
#Run chain tool for helios

startrun=1
endrun=$1
if [ ! $endrun ]; then
   echo "usage: rc_submit <number of runs>"
   exit
fi 
scan=$2
if [ ! $scan ]; then
   echo "usage: rc_submit <number of runs> <scan>"
        "(set 1 for scan) assume no scan"
   scan=0
fi 
testscript=0

which timestamp > /dev/null
if [ $? -ne 0 ]
then
  echo "rc_submit warning: 'timestamp' not found, trying to create"
  tst_path=`which rc_chpt | sed -e "s/rc_chpt/timestamp/"`
  gcc ${tst_path}.c -o $tst_path
  which timestamp
  if [ $? -ne 0 ]
  then
    echo "rc_submit error: 'timestamp' not found" > rcerror.msg
    echo "rc_submit error: 'timestamp' not found, creation failed"
    exit
  fi
fi
if [ -f rcerror.msg ]
then
  rm rcerror.msg
fi

if [ -f rc_helios.status ]
then
  rm rc_helios.status
  touch rc_helios.status
fi


diagdir=$(grep "diagdir" "parameters" | awk -F"'" '{print $2}')
if [ ! -d $diagdir ] 
then
  echo "creating diagdir $diagdir"
  mkdir $diagdir
fi
probdir=$(pwd)

cd $diagdir
echo "diagdir"
pwd
echo "probdir"
cd $probdir
pwd

run=$startrun
while [ $run -le $endrun ]
do
   echo    ""
   echo    "#############################"
   echo    "# starting run $run             #"
   echo    "#############################"
   echo    ""
   echo    "">>rc_helios.status
   echo    "#############################">>rc_helios.status
   echo    "# starting run $run             #">>rc_helios.status
   echo    "#############################">>rc_helios.status
   echo    "">>rc_helios.status
   if [ $scan -lt 1 ]; then
      #check for checkpoint...
      chpt="$diagdir/checkpoint"
      echo "checking for checkpoint.."
      echo "checking for checkpoint..">>rc_helios.status
      ls $chpt
      if [ -f $chpt ];then
         echo "setting read_checkpoint = T for run $run"
         awk '{if ( $1 == "read_checkpoint") {print "read_checkpoint = T"} else {print};}' parameters > tmppar
         mv tmppar parameters
      else
         echo "setting read_checkpoint = F for run $run"
         awk '{if ( $1 == "read_checkpoint") {print "read_checkpoint = F"} else {print};}' parameters > tmppar
         mv tmppar parameters
      fi
   else 
      #set --cs flag
      if [ $run == $startrun ];then
         awk '{if ( $1 == "./scanscript") {print "./scanscript --np $SLURM_NTASKS"} else {print};}' submit.cmd > tmpsub
      else
         awk '{if ( $1 == "./scanscript") {print "./scanscript --np $SLURM_NTASKS --cs"} else {print};}' submit.cmd > tmpsub
      fi
      mv tmpsub submit.cmd
   fi
   if [ -f GENE.finished ]
   then
     echo "rm GENE.finished"
     echo "rm GENE.finished">>rc_helios.status
     rm GENE.finished
   fi
   
   if [ $testscript -lt 1 ]; then  
      jobid=$(sbatch submit.cmd | awk '{print $4}')
      echo "##  starting bathc job $jobid ##"
      echo "##  starting bathc job $jobid ##">>rc_helios.status
   else
      echo   "# testing script without submitting a batch job"
      echo   "# testing script without submitting a batch job">>rc_helios.status
   fi
      
   echo "..waiting for GENE to launch and finish.."
   echo "..waiting for GENE to launch and finish..">>rc_helios.status
   while  [ ! -f GENE.finished ]
   do
      #echo "..waiting for GENE.."
      if [ $testscript -ge 1 ]; then
         cd $diagdir
         touch s_checkpoint
         sleep 1
         touch checkpoint
         touch parameters.dat
         touch nrg.dat 
         cd $probdir
         touch GENE.finished
      else 
         sleep 60
         if [[ `grep ERROR slurm-$jobid.out 2>/dev/null | wc -l` -gt 0 ]]; then
           cat slurm-$jobid.out
           touch GENE.finished
         fi
      fi
   done
   sleep 60
   rm GENE.finished

   if [ $scan -lt 1 ]; then
      cd $diagdir
      time_schpt=$(timestamp s_checkpoint)
      time_chpt=$(timestamp checkpoint)
      if [ $time_chpt -ge $time_schpt ]
      then
         echo "..using checkpoint for run $run"
         echo "..using checkpoint for run $run">>$probdir/rc_helios.status
         echo "(system time=$time_chpt)">>$probdir/rc_helios.status
         cp checkpoint checkpoint.dat
      else
         echo "..using s_checkpoint for run $run"
         echo "..using s_checkpoint for run $run">>$probdir/rc_helios.status
         echo "(system time=$time_schpt)">>$probdir/rc_helios.status
         cp s_checkpoint checkpoint.dat
         cp s_checkpoint checkpoint
      fi
      write_run=$run
      if [[ `ls *_$run *_${run}.dat 2> /dev/null | wc -l` -gt 0 ]]; then
         while [[ `ls *_$write_run *_${write_run}.dat 2> /dev/null | wc -l` -gt 0 ]]
         do
            (( write_run += 1))
         done
         echo "increase file ending from $run to $write_run" 
      fi
      runassign $write_run
      cd $probdir
   fi
   write_run=$run
   #if [ -f *_$run ]
   if [[ `ls *_$run *_${run}.dat 2> /dev/null | wc -l` -gt 0 ]]; then
      #while [ -f *_$write_run ]
      while [[ `ls *_$write_run *_${write_run}.dat 2> /dev/null | wc -l` -gt 0 ]]
      do
         (( write_run += 1))
      done
   fi
   runassign $write_run
   cd $probdir
   echo "increase file ending from $run to $write_run" >>rc_helios.status
   echo "runassign .dat to $write_run" >>rc_helios.status
   (( run += 1 ))
done

echo "rc_helios finished" >>rc_helios.status

